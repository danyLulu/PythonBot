import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from gpt_service.gpt import get_personality_response

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SELECTING_CATEGORY, GENERATING_IDEA = range(2)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–∏–∑–Ω–µ—Å–∞
BUSINESS_CATEGORIES = {
    'online': {
        'name': 'üåê –û–Ω–ª–∞–π–Ω-–±–∏–∑–Ω–µ—Å',
        'prompt': '–°–æ–∑–¥–∞–π –∏–¥–µ—é –¥–ª—è –æ–Ω–ª–∞–π–Ω-–±–∏–∑–Ω–µ—Å–∞. –í–∫–ª—é—á–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é, –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏.'
    },
    'retail': {
        'name': 'üè™ –†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è',
        'prompt': '–°–æ–∑–¥–∞–π –∏–¥–µ—é –¥–ª—è —Ä–æ–∑–Ω–∏—á–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –í–∫–ª—é—á–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –ª–æ–∫–∞—Ü–∏—é, —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é, –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏.'
    },
    'service': {
        'name': 'üîß –°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥',
        'prompt': '–°–æ–∑–¥–∞–π –∏–¥–µ—é –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –≤ —Å—Ñ–µ—Ä–µ —É—Å–ª—É–≥. –í–∫–ª—é—á–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é, –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏.'
    },
    'food': {
        'name': 'üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å',
        'prompt': '–°–æ–∑–¥–∞–π –∏–¥–µ—é –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –í–∫–ª—é—á–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é, –º–µ–Ω—é, —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é, –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏.'
    }
}


def get_business_categories_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –±–∏–∑–Ω–µ—Å–∞"""
    keyboard = []
    for category_id, category_data in BUSINESS_CATEGORIES.items():
        keyboard.append([InlineKeyboardButton(
            category_data['name'],
            callback_data=f"business_category_{category_id}"
        )])
    return InlineKeyboardMarkup(keyboard)


def get_business_continue_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–¥–µ—è", callback_data="business_new_idea")],
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


async def business_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /business"""
    try:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /business')
        return await business_start(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /business: {e}", exc_info=True)
        await update.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def business_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏ –±–∏–∑–Ω–µ—Å–∞"""
    try:
        message_text = (
            "üí° <b>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–∏–∑–Ω–µ—Å–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ—é:\n\n"
            "üåê <b>–û–Ω–ª–∞–π–Ω-–±–∏–∑–Ω–µ—Å</b> - –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã, —Å–µ—Ä–≤–∏—Å—ã, –∫–æ–Ω—Ç–µ–Ω—Ç\n"
            "üè™ <b>–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è</b> - –º–∞–≥–∞–∑–∏–Ω—ã, —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏\n"
            "üîß <b>–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥</b> - –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, —Ä–µ–º–æ–Ω—Ç, –æ–±—É—á–µ–Ω–∏–µ\n"
            "üçΩÔ∏è <b>–†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å</b> - –∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, —Ñ—É–¥-–∫–æ—Ä—Ç—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        )

        keyboard = get_business_categories_keyboard()

        if update.callback_query:
            await update.callback_query.edit_message_text(
                message_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )
            await update.callback_query.answer()
        else:
            await update.message.reply_text(
                message_text,
                parse_mode='HTML',
                reply_markup=keyboard
            )

        return SELECTING_CATEGORY

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π: {e}")
        error_text = "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        if update.callback_query:
            await update.callback_query.edit_message_text(error_text)
        else:
            await update.message.reply_text(error_text)

        return ConversationHandler.END


async def category_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    await query.answer()

    try:
        category_id = query.data.replace("business_category_", "")
        category_data = BUSINESS_CATEGORIES.get(category_id)

        if not category_data:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END

        context.user_data['current_category'] = category_id
        context.user_data['category_data'] = category_data

        processing_text = f"üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ—é –¥–ª—è {category_data['name']}... ‚è≥"
        await query.edit_message_text(processing_text, parse_mode='HTML')

        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ—é –æ—Ç GPT
        idea = await get_personality_response(
            "–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é –±–∏–∑–Ω–µ—Å-–∏–¥–µ—é",
            category_data['prompt']
        )

        if not idea:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ—é –æ—Ç GPT")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = (
            f"üí° <b>–ò–¥–µ—è –¥–ª—è {category_data['name']}</b>\n\n"
            f"{idea}"
        )

        keyboard = get_business_continue_keyboard()
        await query.edit_message_text(
            result_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )

        return GENERATING_IDEA

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏: {e}")
        await query.edit_message_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END


async def handle_business_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –∏–¥–µ–π"""
    query = update.callback_query
    await query.answer()

    try:
        if query.data == "business_new_idea":
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            return await business_start(update, context)

        elif query.data == "main_menu":
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üß† –ö–≤–∏–∑", callback_data="quiz_interface")],
                [InlineKeyboardButton("üí° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π", callback_data="business_interface")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
            await query.edit_message_text(
                "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return ConversationHandler.END

        elif query.data.startswith("business_category_"):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            return await category_selected(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ business callback: {e}")
        await query.edit_message_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

    return GENERATING_IDEA