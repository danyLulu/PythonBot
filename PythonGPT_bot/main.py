from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, filters
import openai
from util import *
import os
from gpt_service.gpt import gpt, gpt_dialog
from osnov_servis.random_facts import get_random_fact
from util import load_prompt, show_main_menu
from osnov_servis.talk import talk, talk_dialog, load_character_prompt
from osnov_servis.shared import dialog, chatgpt
from osnov_servis.image_service import ImageGenerator
from telegram import InputMediaPhoto


async def start(update, context):
    dialog.mode = "main"
    text = load_message("main")
    await send_photo(update, context, "main")
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        "start": "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
        "gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†",
        "talk": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üòà",
        "fact": "—Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç",
        "images": "–≥–µ–Ω–∏—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ "
    })


async def talk_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()

    await send_photo(update, context, query)
    await send_text(update, context, "–æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è!")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    prompt = load_character_prompt(query)
    chatgpt.set_prompt(prompt)


async def random_fact(update, context):
    fact = get_random_fact()
    await send_text(update, context, f"üìö –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:\n\n{fact}")


async def handle_images(update, context):
    dialog.mode = "images"
    try:
        text = load_message("images")
    except FileNotFoundError:
        text = "–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ö–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ' –∏–ª–∏ '–ì–æ—Ä–æ–¥ –±—É–¥—É—â–µ–≥–æ'"
    await send_text(update, context, text)


async def images_dialog(update, context):
    if dialog.mode != "images":
        return

    prompt = update.message.text
    my_message = await send_text(update, context, "üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_bytes = await image_generator.create_images(prompt)
        await my_message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–µ–Ω–µ—Ä–∏—Ä—É—é..."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await update.message.reply_photo(
            photo=image_bytes,
            caption=f"üé® –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}"
        )
    except Exception as e:
        print(f"Error generating image: {e}")
        await my_message.edit_text(
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
image_generator = ImageGenerator(
    api_key=os.getenv("CHATGPT_TOKEN")
)

application = Application.builder().token(os.getenv("TG_BOT_TOKEN")).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("gpt", gpt))
application.add_handler(CommandHandler("talk", talk))
application.add_handler(CommandHandler("fact", random_fact))
application.add_handler(CommandHandler("images", handle_images))

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, gpt_dialog))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, talk_dialog))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, images_dialog))

application.add_handler(CallbackQueryHandler(talk_button, pattern="^talk_.*"))
application.run_polling()

