from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, filters
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
import openai
import os
from dotenv import load_dotenv
from util import (
    send_photo, send_text, load_message, load_prompt,
    show_main_menu, Dialog
)
from gpt_service.gpt import gpt, gpt_dialog
from osnov_servis.random_facts import get_random_fact
from osnov_servis.talk import talk, talk_dialog, load_character_prompt
from osnov_servis.shared import dialog, chatgpt
from osnov_servis.quiz import (
    quiz_command, quiz_start, topic_selected,
    handle_quiz_answer, handle_quiz_callback,
    SELECTING_TOPIC, ANSWERING_QUESTION
)
from osnov_servis.business_ideas import (
    business_command, business_start, category_selected,
    handle_business_callback, SELECTING_CATEGORY, GENERATING_IDEA
)

import requests
from io import BytesIO
import httpx

from telegram import InputMediaPhoto

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_env_vars = ["TG_BOT_TOKEN", "CHATGPT_TOKEN"]
missing_vars = [var for var in required_env_vars if not os.getenv(var)]
if missing_vars:
    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
try:
    application = Application.builder().token(os.getenv("TG_BOT_TOKEN")).build()
except Exception as e:
    raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")

async def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    dialog.mode = "main"
    text = load_message("main")
    await send_photo(update, context, "main")
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        "start": "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
        "gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†",
        "talk": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üòà",
        "fact": "—Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç",
        "quiz": "–ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è üéØ",
        "business": "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ üí°"
    })

async def talk_button(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–∏–∞–ª–æ–≥–∞ —Å –ª–∏—á–Ω–æ—Å—Ç—è–º–∏"""
    query = update.callback_query
    await query.answer()
    await send_photo(update, context, query.data)
    await send_text(update, context, "–æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è!")
    prompt = load_character_prompt(query.data)
    chatgpt.set_prompt(prompt)

async def random_fact(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞"""
    fact = get_random_fact()
    await send_photo(update, context, "facts")
    await send_text(update, context, f"üìö –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:\n\n{fact}")

async def business_button(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π"""
    query = update.callback_query
    await query.answer()
    return await business_start(update, context)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–≤–∏–∑–∞
quiz_handler = ConversationHandler(
    entry_points=[
        CommandHandler('quiz', quiz_command),
        CallbackQueryHandler(quiz_start, pattern='^quiz_interface$')
    ],
    states={
        SELECTING_TOPIC: [
            CallbackQueryHandler(topic_selected, pattern=r'^quiz_topic_'),
            CallbackQueryHandler(handle_quiz_callback, pattern=r'^quiz_')
        ],
        ANSWERING_QUESTION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_quiz_answer),
            CallbackQueryHandler(handle_quiz_callback, pattern=r'^quiz_')
        ]
    },
    fallbacks=[
        CommandHandler('quiz', quiz_command),
        CallbackQueryHandler(quiz_start, pattern='^quiz_interface$')
    ],
    per_chat=True,
    name="quiz_conversation"
)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–¥–µ–π
business_handler = ConversationHandler(
    entry_points=[
        CommandHandler('business', business_command),
        CallbackQueryHandler(business_start, pattern='^business_interface$')
    ],
    states={
        SELECTING_CATEGORY: [
            CallbackQueryHandler(category_selected, pattern=r'^business_category_'),
            CallbackQueryHandler(handle_business_callback, pattern=r'^business_'),
            CallbackQueryHandler(handle_business_callback, pattern=r'^main_menu$')
        ],
        GENERATING_IDEA: [
            CallbackQueryHandler(handle_business_callback, pattern=r'^business_'),
            CallbackQueryHandler(handle_business_callback, pattern=r'^main_menu$')
        ]
    },
    fallbacks=[
        CommandHandler('business', business_command),
        CallbackQueryHandler(business_start, pattern='^business_interface$')
    ],
    per_chat=True,
    name="business_conversation"
)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
# –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º ConversationHandler'—ã
application.add_handler(business_handler)
application.add_handler(quiz_handler)

# –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("gpt", gpt))
application.add_handler(CommandHandler("talk", talk))
application.add_handler(CommandHandler("fact", random_fact))
application.add_handler(CommandHandler("business", business_command))

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, talk_dialog))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, gpt_dialog))

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
application.add_handler(CallbackQueryHandler(talk_button, pattern="^talk_.*"))
application.add_handler(CallbackQueryHandler(business_button, pattern="^business_interface$"))

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    application.run_polling(allowed_updates=Update.ALL_TYPES)

